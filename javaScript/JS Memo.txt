□ JS
- 영어 대소문자를 구별하므로 소스 작성시 주의
- 코드 작성시 들여쓰기 할 것
- 세미콜론으로 문장을 구분할 것, 한 줄에 한 문장씩!
- 주석을 잘 작성할 것 (/*)&(*/), (//)
<script>안에 코드 작성</script>

- alert(메시지) / 알람 창
- confirm(메시지) / 확인 창
- prompt(메시지, 기본값) / 입력받는 창 
- document.write("메시지") / 웹 브라우저 화면에 출력을 담당하는 문
- console.log(메시지) / 콘솔 창에 출력하는 문


JS 기본 문법

변수 선언
- var 변수명 // 변수 선언
- const,let + 15장

자료형

기본 유형
- 숫자형 : 따옴표 없이 숫자로만
var a = 2000;

- 문자열 : 작은따옴표나 큰따옴표로 묶어서 나타냄
var a = "banana"; or var a = "2000";

- 논리형 : 참(true), 거짓(false)이라는 2가지 값만 있는 유형 (소문자로)
var a = true;

복합 유형
- 배열 : 하나의 변수에 여러 개의 값을 저장
var seasons = ['spring', 'summer', 'autumn', 'winter'];

- 객체 : 함수와 속성을 함께 포함
var date = new Date();

특수 유형
undefined : 자료형이 지정되지 않았을 때의 상태, 변수선언만 하고 값을 할당하지 않은 경우
null : 값이 유효하지 않을 때

연산자 

- 산술연산자 
- (+, -, *, /) : 사칙연산
- % 값을 나눈 나머지
- ++ 피연산자를 1증가
- -- 피연산자를 1 감소

- 삼항 조건 연산자 : ? 앞에 있는 조건식이 참이면 : 왼쪽의 값, 거짓이면 : 오른쪽의 값을 리턴
((a%3===0) ? "3의배수" : "3의 배수가 아닙니다")

□ 여러 동작을 묶은 덩어리, 함수
- JavaScript 에서는 함수 선언 부분을 가장 먼저 해석해요, 따라서 원하는 어느곳에서든지 함수를 선언해두기만 하면 상관없이 함수를 호출 할 수 있음
// 보통은 소스의 앞부분이나 뒷부분에 함수 선언 부분을 모아 둔 다음, 필요할 때마다 함수를 호출해서 사용하곤 한담다
function 함수이름(변수){ 명령 }


- 전역변수 : 소스 전체에서 사용할 수 있는 변수, 적용범위를 제한하지 않고 쓸 수 있음.
> 함수밖에서 선언하거나 함수 안에서는 var 예약어를 빼고 선언해야함
- 지역변수 : 함수 안에서만 사용할 수 있는 변수,

※ var 과 let, const의 가장 큰 차이는 스코프의 범위, var 은 함수영역의 스코프를 가지지만, let과 const는 블록 영역의 스코프를 가짐.
let 예악어로 선언한 변수는 변수를 선언한  블록 {여기 안에} 서만 유효하고 블록을 벗어나면 사용할 수 없음

- let 특징,
1- { } 안에서만 유효하고 블록을 벗어날 수 없음 (블록레벨 스코프)
2- 재할당은 가능하지만 재선언을 불가능함 // 같은 변수의 이름을 사용할 걱정이 읎다
3- 호이스팅을 할 수 없음

- const 특징, 
1- const 로 선언한 변수는 상수 변수임 : 상수는 프로그램에서 변하지 않는 값을 의미
2- { } 안에서만 유효하고 블록을 벗어날 수 없음 (블록레벨 스코프)
3- 재선언 불가능 재할당 불가능

☆ 이벤트와 이벤트 처리기
버튼을 클릭하거나 항목을 선택하는 것을 '이벤트' 라고 함.
그리고 이벤트가 발생했을 때 실행하는 함수를 '이벤트 처리기' 라고 함.

□ 마우스 이벤트
마우스를 이용해 버튼이나 휠 버튼을 조작할 때 발생,
click : 사용자가 HTML 요소를 클릭할 때 이벤트
dbclick : 사용자가 HTML 요소를 더블 클릭할 때 이벤트
mousedown : 사용자가 요소 위에서 마우스 버튼을 눌렀을 때 이벤트
mousemove : 사용자가 요소 위에서 마우스 포인터를 움직일 때 이벤트
mouseover : 마우스 포인터가 요소 위로 옮겨질 때 이벤트
mouseout : 마우스 포인터가 요소를 벗어날 때 옮겨질 때 이벤트
mouseup : 사용자가 요소 위에 놓인 마우스 버튼에서 손을 뗼 때 이벤트

□ 키보드 이벤트
키보드에서 특정 키를 조작할 때 발생,
keydown : 사용자가 키를 누르는 동안 이벤트
keypress : 사용자가 키를 눌렀을 때 이벤트
keyup : 사용자가 키에서 손을 뗄 때 이벤트

□ 문서 로딩 이벤트
웹 문서를 브라우저 창에 보여 주는 것과 관련,
abort : 문서가 완전히 로딩되기 전에 불러오기를 멈췄을 때 이벤트 
error : 문서가 정확히 로딩되지 않았을 때 이벤트
load : 문서 로딩이 끝나면 이벤트
resize : 문서 화면 크기가 바뀌었을 때 이벤트
scroll : 문서 화면이 스크롤되었을 때 이벤트
unload : 문서에서 벗어날 때 이벤트

□ 폼 이벤트
로그인, 검색, 게시판, 설문 조사 등 사용자가 입력하는 모든 요소에 관련
blur : 폼 요소에 포커스를잃었을 때 이벤트
change :목록이나 체크 상태 등이 변경되면 이벤트
	<input>, <select>, <textarea>
focus : 폼 요소에 포커스가 놓였을 때 이벤트
	<label>, <select>, <textarea>, <button>
reset : 폼이 리셋되었을 때 이벤트
submit : submit 버튼을 클릭 했을 때 이벤트

<태그 on이벤트명 = "함수명">
ex) <a href="#" onclick="alert('버튼을 클릭했습니다.')">버튼</a>

DOM을 이용한 이벤트 처리기
웹 요소.onclick = 함수;

□ 객체
프로그램에세 인식할 수 있는 모든 대상을 가리키는 것으로 이해할 것.

자바스크립트에서 객체는 참조 형태로 사용해야 함.
즉, 객체 자체가 아니라 인스턴스의 형태로 만들어서 사용해야 함.

객체의 인스턴스를 만들 때는 new 라는 예약어를 사용함.
new 객체명

△ Array 객체

△ Math 객체
E : 오일러 상수
PI : 원주율 (3.14...)

abs() 	절댓값을 반환
sin()  	사인 값을 반환
cos() 	코사인 값을 반환
tan() 	탄젠트 값을 반환
exp() 	지수 함수를 나타냄
random() 0과1 사이의 무작위 수를 반환
floor()	소수점 아래 버리기

△ Date 객체
* 모든 날짜 계산의 기분은 1970년 1월 1일 00:00:00 부터
* 월~일(0~6), 1월~12월(0~11) 로 표현됨으로 유의

자바스크립트 내장 객체 
[ window, document, navigator, history, location, screen ]
△ window 객체 메소드
- alert() : 알림 창을 표시
- blur() : 현재 창에서 포커스를 제공
- close() : 현재 창 닫기
- confirm() : [확인], [취소] 버튼이 있는 확인 창을 표시
- focus() : 현재 창에 포커스를 부여
- moveBy() : 현재 창을 지정한 크기만큼 이동
- moveTo() : 현재 창을 지정한 좌표로 이동
- open() : 새로운 창 열기 // open(경로, 창 이름, 창 옵션);
- postMessage() : 메시지를 다른 창으로 전달
- print() : 현재 문서를 인쇄함
- prompt() : 프롬프트 창에 입력한 텍스트를 반환
- resizeBy() : 지정한 크기만큼 현재 창의 크기를 조절
- resizeTo() : 동적으로 브라우저 창의 크기를 조절
- scroll() : 문서에서 특정 위치로 스크롤.
- scrollBy() : 지정한 크기만큼씩 스크롤
- scrollTo() : 지정한 위치까지 스크롤
- sizeToContent() : 내용에 맞게 창의 크기를 맞춤
- stop() : 로딩을 중지



△ screen 객체