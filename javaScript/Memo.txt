코딩에서 쓰는 영어단어들 외우기
자바스크립트 메인		https://developer.mozilla.org/ko/docs/Web/JavaScript 
Visual Studio Code 홈페이지 https://code.visualstudio.com/
Codepen			https://codepen.io/
Github			https://github.com/
소프트웨어야 놀자 		https://www.playsw.or.kr/software

유튜브
생활코딩		사이트	https://opentutorials.org/course/1

코딩 공부 현황
-  생활코딩 21.반복문 부터 하면 됩니다

□ HTML

표 만들기
- 표는 행과 열, 그리고 셀로 이루어짐
<table></table> : 이 사이에 표와 관련된 태그를 모두 넣어요
<caption> : 표 제목

※
<tr>
<td>1행 1열</td>
<td>1행 2열</td>
</tr>
<tr>
<td>2행 1열</td>
<td>2행 2열</td>
</tr>

폼에서 사용하는 태그
<form> 폼의 시작과 끝 생성
<fieldset> 폼 요소를 그룹으로 묶음
<legend> 필드셋 제목

<input> 태그 종류 // 사용자 입력 칸 생성
ㄴ (주요 속성)

- text : 한 줄짜리 텍트를 입력할 수 있는 텍스트 박스
- password : 비밀번호를 입력할 수 있는 필드
ㄴ	size : 텍스트와 비밀번호 필드의 길이를 지정, 화면에 몇 글자가 보이도록 할 것인지르 지정, 
	value : 텍스트 필드 요소가 화면에 표시될 때 필드 부분에 보여 주는 내용, 사용하지 않을시 빈 텍스트
	maxlength : 입력할 수 있는 최대 문자 수를 지정합니다
   
- search : 검색할 때 입력하는 필드
- url : URL 주소를 입력할 수 있는 필드
- email : 이메일 주소를 입력할 수 있는 필드
- tel  : 전화번호를 입력할 수 있는 필드

☆ value 속성
- checkbox : 주어진 여러 항목에서 2개 이상 선택할 수 있는 체크박스
- radio : 주어진 여러 항목에서 1개만 선택할 수 있는 라디오 버튼 // name 속성을 같게 지정!
ㄴ	value : 선택한 체크박스나 라디오 버튼을 서버에게 알려 줄 때 넘겨줄 값을 지정, 영문이거나 숫자여야 하며 필수 속성임
	checked : 처음은 아무것도 선택되지 않은 상태, 선택하고 싶으면 사용, 속성값 X

- number : 숫자를 조절할 수 있는 스핀 박스
- range : 숫자를 조절할 수 있는 슬라이드 막대
ㄴ	min/max : 입력할 수 있는 최솟값, 최댓값 지정, 기본 최솟값은 0 최댓값은 100
	step : 숫자 간격을 지정, 기본값은 1
	value : 필드에 표시할 초깃값

- date : 사용자 지역을 기준으로 날짜(연, 월, 일)
- month : 사용자 지역을 기준으로 날짜(연, 월)
- week : 사용자 지역을 기준으로 날짜(연, 주)
- time : 사용자 지역을 기준으로 시간(시, 분, 초, 분할 초)
- datetime : 국제 표준시(UTC)로 설정된 날짜와 시간(연, 월, 일, 시, 분, 초, 분할 초)
- datetime-local : 사용자가 있는 지역을 기준으로 날짜와 시간(연, 월, 일, 시, 분, 초, 분할 초)
ㄴ	min/max : 날짜나 시간의 범위를 제한할 때 사용, min은 시작 날, max는 마지막 날
	step : 스핀 박스의 화살표를 클릭했을 때 증감시킬 크기를 지정
	value : 기본적으로 표시할 날짜나 시간을 지정

- submit : 전송 버튼
- reset : 리셋 버튼
- image : submit 버튼 대신 사용할 이미지 삽입
- button : 일반 버튼
- file : 파일을 첨부할 수 있는 버튼
- hidden : 사용자에게는 보이지 않지만 서버로 넘겨주는 값이 있는 필드를 만듭니다


input 태그 속성
- autofocus : 페이지를 불러오자마자 폼에서 원하는 요소에 마우스 포인터를 표시
- placeholder : 사용자가 텍스트를 입력할 때 입력란에 힌트내용
- readonly : 사용자가 입력하지는 못하고 읽게만 하는 읽기 전용 필드
- required : 필수입력 칸

폼에서 사용하는 태그
- textarea : 텍스트 여러 줄을 입력하는 영역
ㄴ	cols : 텍스트 영역의 가로 너비를 문자 단위로 지정 ex) cols="40" // 대략 지정,
	rows : 텍스트 영역의 세로 길이를 줄 단위로 지정, 지정한 숫자보다 줄 개수가 많아지면 스크롤 막대 
	( 한글 1글자 = 영어 2글자, cols="40" = 한글 20문자 )

- select : 드롭다운 목록 생성 ( 여러 옵션(목록) 중 선택하게 하려면 )
ㄴ	size : 화면에 표시할 드롭다운 항목의 개수를 지정
	multiple : 드롭다운 목록에서 둘 이상의 항목을 선택할 때 사용
- option : value 속성을 이용해 서버로 넘겨주는 값을 지정
ㄴ	
	ex) <select>
		<option value="서버로 넘길 값1">내용1</option>
		...
	    </select>

- datalist : 텍스트 필드에 값을 직접 입력하지 않고 미리 만들어 놓은 값 중 선택
- option,
ㄴ	
	ex) <input type="text" list="데이터 목록 id">
	    <datalist id="데이터 목록 id">
		<option value="서버로 넘길 값1">내용1</option>
		...
	    </datalist>

- button : 버튼을 생성 type 으로는 submit, reset, button 을, type 을 적지않으면 submit 으로 간주
ㄴ	submit : 폼을 서버로 전송, <input type="submit"> 과 같은기능
	reset : 폼에서 입력한 내용을 초기화, <input type="reset"> 과 같은기능
	button : 별 기능없는 폰버튼, <input type="button"> 과 같은기능


□ CSS
https://www.toptal.com/developers/cssminifier < CSS 소스 경량화 툴 Web

☆ CSS 스타일의 우선순위 (중요도)
	사용자 스타일 -> 제작자 스타일 -> 브라우저 기본 스타일

☆ 우선순위(중요도)가 같다면
	!important -> 인라인 스타일 -> id 스타일 -> 클래스 스타일 -> 타입 스타일

 CSS 기본 스타일형식
	선택자 { 속성1: 속성값1; 속성2: 속성값; }

- 내부 스타일 시트 : 웹 문서 안에서 사용할 스타일을 같은 문서 안에 정리, <head> 태그 안에서 정의해야함, <style>태그 사이에 작성해야함 
- 외부 스타일 시트 : 웹 문서에서 사용할 스타일을 별도 파일로 저장해놓고 필요할때마다 가져와서 사용하는 시트, .css 파일 확장자 사용, <style> 태그 X
		 외부 스타일 시트를 연결할 때 사용하는 태그는 <link>, ex) <link rel="stylesheet" href="외부 스타일 시트 파일 경로">
- 전체 선택자(universal selector) : 스타일을 문서의 모든 요소에 적용할 때 사용! ex) *{속성:값; 속성:값; ...} 
- 타입 선택자(type selector) : 특정 태그를 사용한 모든 요소에 스타일을 적용! ex) 태그명{ 스타일 규칙 }, p{font-style: italic;}
- 클래스 선택자(class selector) : 
- id 선택자(id selector) : #container
- 그룹 선택자(group selector) : 같은 스타일 규칙을 사용하는 경우 (,) 로 구분해 선택자를 나열한후 정의 ex) p, h1{속성:값; 속성:값; ...} 

- text-align : 텍스트 정렬 속성- color : 글자색 속성
- background-color : 배경색
- margin & paddingn : 여백 디자인
- border : 테두리, 테두리 굵기, 테두리 색
- width : 너비 // px
- height : 높이 // px

- font-family:<글꼴 이름>
- font-size:<절대크기>
- font-style: normal | italic // 텍스트 글꼴 속성
- font-weight: normal | bold | bolder | lighter | 100~900 // 글자 굵기

- color:<색상>
+ rgb(255,255,255), rgba(명도조절), #000000 16진수,

- text-align: start | end | left | right | center | justify | match-parent
start/end : 현재 텍스트 줄의 시작/끝 위치에 맞추어 정렬
left/center/right : 왼쪽/가운데/오른쪽
justify : 양쪽에 맞추어 정렬
match-parent : 부모 요소를 따라 정렬

- line-height: 줄간격 속성 // height 속성과 맞추면 위아래 동일 정렬 가능


□ JS
- 영어 대소문자를 구별하므로 소스 작성시 주의
- 코드 작성시 들여쓰기 할 것
- 세미콜론으로 문장을 구분할 것, 한 줄에 한 문장씩!
- 주석을 잘 작성할 것 (/*)&(*/), (//)
<script>안에 코드 작성</script>

- alert(메시지) / 알람 창
- confirm(메시지) / 확인 창
- prompt(메시지, 기본값) / 입력받는 창 
- document.write("메시지") / 웹 브라우저 화면에 출력을 담당하는 문
- console.log(메시지) / 콘솔 창에 출력하는 문


JS 기본 문법

변수 선언
- var 변수명 // 변수 선언
- const,let + 15장

자료형

기본 유형
- 숫자형 : 따옴표 없이 숫자로만
var a = 2000;

- 문자열 : 작은따옴표나 큰따옴표로 묶어서 나타냄
var a = "banana"; or var a = "2000";

- 논리형 : 참(true), 거짓(false)이라는 2가지 값만 있는 유형 (소문자로)
var a = true;

복합 유형
- 배열 : 하나의 변수에 여러 개의 값을 저장
var seasons = ['spring', 'summer', 'autumn', 'winter'];

- 객체 : 함수와 속성을 함께 포함
var date = new Date();

특수 유형
undefined : 자료형이 지정되지 않았을 때의 상태, 변수선언만 하고 값을 할당하지 않은 경우
null : 값이 유효하지 않을 때

연산자 

- 산술연산자 
- (+, -, *, /) : 사칙연산
- % 값을 나눈 나머지
- ++ 피연산자를 1증가
- -- 피연산자를 1 감소

- 삼항 조건 연산자 : ? 앞에 있는 조건식이 참이면 : 왼쪽의 값, 거짓이면 : 오른쪽의 값을 리턴
((a%3===0) ? "3의배수" : "3의 배수가 아닙니다")

□ 여러 동작을 묶은 덩어리, 함수
- JavaScript 에서는 함수 선언 부분을 가장 먼저 해석해요, 따라서 원하는 어느곳에서든지 함수를 선언해두기만 하면 상관없이 함수를 호출 할 수 있음
// 보통은 소스의 앞부분이나 뒷부분에 함수 선언 부분을 모아 둔 다음, 필요할 때마다 함수를 호출해서 사용하곤 한담다
function 함수이름(변수){ 명령 }


- 전역변수 : 소스 전체에서 사용할 수 있는 변수, 적용범위를 제한하지 않고 쓸 수 있음.
> 함수밖에서 선언하거나 함수 안에서는 var 예약어를 빼고 선언해야함
- 지역변수 : 함수 안에서만 사용할 수 있는 변수,

※ var 과 let, const의 가장 큰 차이는 스코프의 범위, var 은 함수영역의 스코프를 가지지만, let과 const는 블록 영역의 스코프를 가짐.
let 예악어로 선언한 변수는 변수를 선언한  블록 {여기 안에} 서만 유효하고 블록을 벗어나면 사용할 수 없음

- let 특징,
1- { } 안에서만 유효하고 블록을 벗어날 수 없음 (블록레벨 스코프)
2- 재할당은 가능하지만 재선언을 불가능함 // 같은 변수의 이름을 사용할 걱정이 읎다
3- 호이스팅을 할 수 없음

- const 특징, 
1- const 로 선언한 변수는 상수 변수임 : 상수는 프로그램에서 변하지 않는 값을 의미
2- { } 안에서만 유효하고 블록을 벗어날 수 없음 (블록레벨 스코프)
3- 재선언 불가능 재할당 불가능

☆ 이벤트와 이벤트 처리기
버튼을 클릭하거나 항목을 선택하는 것을 '이벤트' 라고 함.
그리고 이벤트가 발생했을 때 실행하는 함수를 '이벤트 처리기' 라고 함.

□ 마우스 이벤트
마우스를 이용해 버튼이나 휠 버튼을 조작할 때 발생,
click : 사용자가 HTML 요소를 클릭할 때 이벤트
dbclick : 사용자가 HTML 요소를 더블 클릭할 때 이벤트
mousedown : 사용자가 요소 위에서 마우스 버튼을 눌렀을 때 이벤트
mousemove : 사용자가 요소 위에서 마우스 포인터를 움직일 때 이벤트
mouseover : 마우스 포인터가 요소 위로 옮겨질 때 이벤트
mouseout : 마우스 포인터가 요소를 벗어날 때 옮겨질 때 이벤트
mouseup : 사용자가 요소 위에 놓인 마우스 버튼에서 손을 뗼 때 이벤트

□ 키보드 이벤트
키보드에서 특정 키를 조작할 때 발생,
keydown : 사용자가 키를 누르는 동안 이벤트
keypress : 사용자가 키를 눌렀을 때 이벤트
keyup : 사용자가 키에서 손을 뗄 때 이벤트

□ 문서 로딩 이벤트
웹 문서를 브라우저 창에 보여 주는 것과 관련,
abort : 문서가 완전히 로딩되기 전에 불러오기를 멈췄을 때 이벤트 
error : 문서가 정확히 로딩되지 않았을 때 이벤트
load : 문서 로딩이 끝나면 이벤트
resize : 문서 화면 크기가 바뀌었을 때 이벤트
scroll : 문서 화면이 스크롤되었을 때 이벤트
unload : 문서에서 벗어날 때 이벤트

□ 폼 이벤트
로그인, 검색, 게시판, 설문 조사 등 사용자가 입력하는 모든 요소에 관련
blur : 폼 요소에 포커스를잃었을 때 이벤트
change :목록이나 체크 상태 등이 변경되면 이벤트
	<input>, <select>, <textarea>
focus : 폼 요소에 포커스가 놓였을 때 이벤트
	<label>, <select>, <textarea>, <button>
reset : 폼이 리셋되었을 때 이벤트
submit : submit 버튼을 클릭 했을 때 이벤트

<태그 on이벤트명 = "함수명">
ex) <a href="#" onclick="alert('버튼을 클릭했습니다.')">버튼</a>

DOM을 이용한 이벤트 처리기
웹 요소.onclick = 함수;

□ 객체
프로그램에세 인식할 수 있는 모든 대상을 가리키는 것으로 이해할 것.

자바스크립트에서 객체는 참조 형태로 사용해야 함.
즉, 객체 자체가 아니라 인스턴스의 형태로 만들어서 사용해야 함.

객체의 인스턴스를 만들 때는 new 라는 예약어를 사용함.
new 객체명

△ Array 객체

△ Math 객체
E : 오일러 상수
PI : 원주율 (3.14...)

abs() 	절댓값을 반환
sin()  	사인 값을 반환
cos() 	코사인 값을 반환
tan() 	탄젠트 값을 반환
exp() 	지수 함수를 나타냄
random() 0과1 사이의 무작위 수를 반환
floor()	소수점 아래 버리기

△ Date 객체
* 모든 날짜 계산의 기분은 1970년 1월 1일 00:00:00 부터
* 월~일(0~6), 1월~12월(0~11) 로 표현됨으로 유의

자바스크립트 내장 객체 
[ window, document, navigator, history, location, screen ]
△ window 객체 메소드
- alert() : 알림 창을 표시
- blur() : 현재 창에서 포커스를 제공
- close() : 현재 창 닫기
- confirm() : [확인], [취소] 버튼이 있는 확인 창을 표시
- focus() : 현재 창에 포커스를 부여
- moveBy() : 현재 창을 지정한 크기만큼 이동
- moveTo() : 현재 창을 지정한 좌표로 이동
- open() : 새로운 창 열기 // open(경로, 창 이름, 창 옵션);
- postMessage() : 메시지를 다른 창으로 전달
- print() : 현재 문서를 인쇄함
- prompt() : 프롬프트 창에 입력한 텍스트를 반환
- resizeBy() : 지정한 크기만큼 현재 창의 크기를 조절
- resizeTo() : 동적으로 브라우저 창의 크기를 조절
- scroll() : 문서에서 특정 위치로 스크롤.
- scrollBy() : 지정한 크기만큼씩 스크롤
- scrollTo() : 지정한 위치까지 스크롤
- sizeToContent() : 내용에 맞게 창의 크기를 맞춤
- stop() : 로딩을 중지



△ screen 객체










